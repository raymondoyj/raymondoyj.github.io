---
layout:     post
title:      "使用git-flow自动化你的git分支工作流"
subtitle:   "Using git-flow to automate your git branching workflow"
date:       2017-08-14 24:00:00
author:     "Raymond"
header-img: "img/post-bg-android.jpg"
tags:
    - git
    - git-flow
---

> 这篇文章译自[Using git-flow to automate your git branching workflow](https://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/)


[Vincent Driessen的分支模型](http://nvie.com/posts/a-successful-git-branching-model/)是一个基于git的分支管理和版本发布的策略，帮助开发人员在更大的软件项目中跟踪软件的features（功能分支），hotfixes（debug分支）和releases（发布的版本）。虽然这个工作流需要输入和记住很多命令，但是可以使用[基于git命令的git-flow库](https://github.com/nvie/gitflow)来自动化流程的某些部分，使其更容易使用。

<img src="/img/in-post/post-git-flow/gitflow.gif" alt="git-flow分支模型">

[安装git-flow](https://github.com/nvie/gitflow/wiki/Installation) (`apt install git-flow`)后, 你可以在你的git仓库中使用git-flow的`init`命令。你可以在已有的仓库钟使用git-flow, 但是让我们从一个新的仓库开始吧：

```
$ git flow init
Initialized empty Git repository in ~/project/.git/
No branches exist yet. Base branches must be created now.
Branch name for production releases: [master]
Branch name for "next release" development: [develop]

How to name your supporting branch prefixes?
Feature branches? [feature/]
Release branches? [release/]
Hotfix branches? [hotfix/]
Support branches? [support/]
Version tag prefix? []
```

git-flow只是在git命令上封装了一层, 所以`init`命令除了新建分支外不会对你的仓库做任何改变。如果你不再使用git-flow，那么不需要改变或删除东西，你只要停止使用git-flow命令即可。

如果你在设置后运行`git branch`，你会发现你从master分支切换到名为`develop`的新分支。

```
$ git branch
* develop
  master
```

`develop`分支作为开发过程中经常使用的默认分支， `master`分支则存放可以随时部署到生产环境的代码。所以从现在开始不要将代码推送到`master`分支，你应该用`git push origin develop`推送新的代码到仓库里。

### Feature branches（功能分支）

git-flow可以通过使用feature branches來轻松地同时处理多个功能。 试一下, 用`feature start`加上新的分支名称 (比如, "authentication"):

```
$ git flow feature start authentication
Switched to a new branch 'feature/authentication'

Summary of actions:
- A new branch 'feature/authentication' was created, based on 'develop'
- You are now on branch 'feature/authentication'

Now, start committing on your feature. When done, use:

     git flow feature finish authentication
```

打印信息说, 你现在在一个新的分支上，你可以在分支上实现你的功能。
在开发过程中使用通常的git命令即可，当功能开发完成时，使用`feature finish`来结束功能分支：

```
$ git flow feature finish authentication
Switched to branch 'develop'
Updating 9060376..00bafe4
Fast-forward
 authentication.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 authentication.txt
Deleted branch feature/authentication (was 00bafe4).

Summary of actions:
- The feature branch 'feature/authentication' was merged into 'develop'
- Feature branch 'feature/authentication' has been removed
- You are now on branch 'develop'
```

你的功能分支会合并到`develop`分支，并且当前分支会切换回`develop`分支。 在合并的过程中, git-flow使用`git merge --no-ff feature/authentication`在你的功能分支被删除之前确保不会丢失任何历史信息。

### Versioned releases

If you need tagged and versioned releases, you can use git-flow's release branches to start a new branch when you're ready to deploy a new version to production.

Like everything else in git-flow, you don't have to use release branches if you don't want to. Prefer to manually `git merge --no-ff develop` into master without tagging? No problem.
However, if you're working on a versioned API or library, release branches might be really useful, and they work exactly like you'd expect:

```
$ git flow release start 0.1.0
Switched to a new branch 'release/0.1.0'

Summary of actions:
- A new branch 'release/0.1.0' was created, based on 'develop'
- You are now on branch 'release/0.1.0'

Follow-up actions:
- Bump the version number now!
- Start committing last-minute fixes in preparing your release
- When done, run:

     git flow release finish '0.1.0'
```

Bump the version number and do everything that's required to release your project in the release branch. I personally wouldn't do any last minute fixes, but if you do, git-flow will make sure everything is correctly merged into both `master` and `develop`.
Then, finish the release:

```
$ git flow release finish 0.1.0
Switched to branch 'master'
Merge made by the 'recursive' strategy.
 authentication.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 authentication.txt
Deleted branch release/0.1.0 (was 1b26f7c).

Summary of actions:
- Latest objects have been fetched from 'origin'
- Release branch has been merged into 'master'
- The release was tagged '0.1.0'
- Release branch has been back-merged into 'develop'
- Release branch 'release/0.1.0' has been deleted
```

Boom. git-flow pulls from origin, merges the release branch into master, tags the release and back-merges everything back into develop before removing the release branch.

You're still on master, so you can deploy before going back to your `develop` branch, which git-flow made sure to update with the release changes in `master`.

### Hotfixing production code

Because you keep your `master` branch always in sync with the code that's on production, you'll be able to quickly fix any issues on production.

For example, if your assets aren't loading on production, you'd roll back your deploy and start a hotfix branch:

```
$ git flow hotfix start assets
Switched to a new branch 'hotfix/assets'

Summary of actions:
- A new branch 'hotfix/assets' was created, based on 'master'
- You are now on branch 'hotfix/assets'

Follow-up actions:
- Bump the version number now!
- Start committing your hot fixes
- When done, run:

     git flow hotfix finish 'assets'
```

Hotfix branches are a lot like release branches, except they're based on master instead of develop. You're automatically switched to the new hotfix branch so you can start fixing the issue and bumping the minor version number.
When you're done, `hotfix finish`:

```
 $ git flow hotfix finish assets
Switched to branch 'master'
Merge made by the 'recursive' strategy.
 assets.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 assets.txt
Switched to branch 'develop'
Merge made by the 'recursive' strategy.
 assets.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 assets.txt
Deleted branch hotfix/assets (was 08edb94).

Summary of actions:
- Latest objects have been fetched from 'origin'
- Hotfix branch has been merged into 'master'
- The hotfix was tagged '0.1.1'
- Hotfix branch has been back-merged into 'develop'
- Hotfix branch 'hotfix/assets' has been deleted
```

Like when finishing a release branch, the hotfix branch gets merged into both `master` and `develop`. The release is tagged and the hotfix branch is removed.

### Why aren't you using git-flow?

Of course, if you're [not doing versioned releases](http://scottchacon.com/2011/08/31/github-flow.html), Vincent's git workflow and the git-flow library might not be a right fit for you. However, if you work on a project that's [semantically versioned](http://semver.org), like a Rubygem or a versioned API, git-flow will give you a couple of simple commands that will do a lot of work under the hood, making working on features, pushing new releases and hotfixing bugs a lot easier. Well, at leat on the git side.
